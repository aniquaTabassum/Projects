
import java.awt.Dimension;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import javax.swing.ButtonGroup;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author hp
 */
public class Page extends javax.swing.JFrame {

    /**
     * Creates new form Page
     */
    public Page() {

        initComponents();
        firstPage.setVisible(true);

        firstPage.setSize(1000, 1000);
        update.setVisible(false);
        secondPage.setVisible(false);

    }
    private String sexSelect;
    private String marr;
    int iUp;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        firstPage = new javax.swing.JPanel();
        addButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        firstField = new javax.swing.JTextField();
        lastField = new javax.swing.JTextField();
        male = new javax.swing.JRadioButton();
        female = new javax.swing.JRadioButton();
        dept = new javax.swing.JComboBox<>();
        country = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        married = new javax.swing.JRadioButton();
        unmarried = new javax.swing.JRadioButton();
        update = new javax.swing.JButton();
        CGPALabel = new javax.swing.JLabel();
        cgpaArea = new javax.swing.JTextField();
        secondPage = new javax.swing.JPanel();
        backButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        remove = new javax.swing.JButton();
        update2 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        logout = new javax.swing.JButton();
        sortList = new javax.swing.JComboBox<>();
        sortLabel = new javax.swing.JLabel();
        searchLabel = new javax.swing.JLabel();
        searchCombo = new javax.swing.JComboBox<>();
        searchArea = new javax.swing.JTextField();
        goButton = new javax.swing.JButton();
        originalTable = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        firstPage.setBackground(new java.awt.Color(255, 102, 102));
        firstPage.setAutoscrolls(true);
        firstPage.setMaximumSize(new java.awt.Dimension(800, 800));
        firstPage.setPreferredSize(new java.awt.Dimension(749, 668));

        addButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("   First Name");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Last Name");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("Country");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setText("Department");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setText("Sex");

        male.setText("Male");
        male.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maleActionPerformed(evt);
            }
        });

        female.setText("Female");
        female.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                femaleActionPerformed(evt);
            }
        });

        dept.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "CSE", "EEE", "CE", "ME", "IPE", "Architecture", " " }));
        dept.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deptActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setText("Marital Status");

        married.setText("Married");
        married.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                marriedActionPerformed(evt);
            }
        });

        unmarried.setText("Unmarried");
        unmarried.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unmarriedActionPerformed(evt);
            }
        });

        update.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        update.setText("Update");
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });

        CGPALabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        CGPALabel.setText("CGPA");

        javax.swing.GroupLayout firstPageLayout = new javax.swing.GroupLayout(firstPage);
        firstPage.setLayout(firstPageLayout);
        firstPageLayout.setHorizontalGroup(
            firstPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(firstPageLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(firstPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(firstPageLayout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(firstPageLayout.createSequentialGroup()
                        .addGroup(firstPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(firstPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(firstPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(firstField, javax.swing.GroupLayout.DEFAULT_SIZE, 237, Short.MAX_VALUE)
                        .addComponent(lastField))
                    .addGroup(firstPageLayout.createSequentialGroup()
                        .addGap(166, 166, 166)
                        .addGroup(firstPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(female)
                            .addComponent(unmarried))))
                .addGap(289, 341, Short.MAX_VALUE))
            .addGroup(firstPageLayout.createSequentialGroup()
                .addGroup(firstPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(firstPageLayout.createSequentialGroup()
                        .addGap(110, 110, 110)
                        .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(141, 141, 141)
                        .addComponent(update, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(firstPageLayout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(firstPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)
                            .addComponent(CGPALabel, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(firstPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(firstPageLayout.createSequentialGroup()
                                .addGap(5, 5, 5)
                                .addComponent(cgpaArea, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(firstPageLayout.createSequentialGroup()
                                .addGap(51, 51, 51)
                                .addGroup(firstPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(country, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(firstPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(married)
                                        .addComponent(male)
                                        .addComponent(dept, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        firstPageLayout.setVerticalGroup(
            firstPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, firstPageLayout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addGroup(firstPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(firstField, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(firstPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(firstPageLayout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(lastField, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(firstPageLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(firstPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(firstPageLayout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(43, 43, 43))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, firstPageLayout.createSequentialGroup()
                        .addComponent(country, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)))
                .addGroup(firstPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(firstPageLayout.createSequentialGroup()
                        .addComponent(CGPALabel, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(15, 15, 15))
                    .addGroup(firstPageLayout.createSequentialGroup()
                        .addComponent(cgpaArea)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(firstPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dept, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(firstPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(male)
                    .addComponent(female))
                .addGap(33, 33, 33)
                .addGroup(firstPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(married)
                    .addComponent(unmarried)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                .addGroup(firstPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(update, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(109, 109, 109))
        );

        secondPage.setBackground(new java.awt.Color(255, 204, 204));
        secondPage.setPreferredSize(new java.awt.Dimension(800, 800));

        backButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        backButton.setText("New");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Country", "Sex", "Department", "Marital Status", "CGPA"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(table);

        remove.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        remove.setText("Remove");
        remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeActionPerformed(evt);
            }
        });

        update2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        update2.setText("Update");
        update2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                update2ActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel7.setText("      Student Information Table");

        logout.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        logout.setText("Logout");
        logout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutActionPerformed(evt);
            }
        });

        sortList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Name", "Department", "CGPA", " ", " " }));
        sortList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortListActionPerformed(evt);
            }
        });

        sortLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        sortLabel.setText("   Sort");

        searchLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        searchLabel.setText("Search");

        searchCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Name", "Department", "Country", "CGPA", " " }));
        searchCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchComboActionPerformed(evt);
            }
        });

        goButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        goButton.setText("Go");
        goButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goButtonActionPerformed(evt);
            }
        });

        originalTable.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        originalTable.setText("Back");
        originalTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                originalTableActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout secondPageLayout = new javax.swing.GroupLayout(secondPage);
        secondPage.setLayout(secondPageLayout);
        secondPageLayout.setHorizontalGroup(
            secondPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(secondPageLayout.createSequentialGroup()
                .addGroup(secondPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(secondPageLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1))
                    .addGroup(secondPageLayout.createSequentialGroup()
                        .addGroup(secondPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(secondPageLayout.createSequentialGroup()
                                .addGap(52, 52, 52)
                                .addComponent(sortLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(sortList, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(143, 143, 143)
                                .addComponent(searchLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(30, 30, 30)
                                .addComponent(searchCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(29, 29, 29)
                                .addComponent(searchArea, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(17, 17, 17)
                                .addComponent(goButton)
                                .addGap(38, 38, 38)
                                .addComponent(originalTable)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 389, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(secondPageLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(27, 27, 27)
                                .addComponent(remove, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(29, 29, 29)
                                .addComponent(update2, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(secondPageLayout.createSequentialGroup()
                                .addGap(195, 195, 195)
                                .addComponent(logout, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 5, Short.MAX_VALUE)))
                .addContainerGap())
        );
        secondPageLayout.setVerticalGroup(
            secondPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, secondPageLayout.createSequentialGroup()
                .addGroup(secondPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, secondPageLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(secondPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(sortList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sortLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(secondPageLayout.createSequentialGroup()
                        .addGap(62, 62, 62)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(secondPageLayout.createSequentialGroup()
                        .addGap(140, 140, 140)
                        .addGroup(secondPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(searchLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(searchCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(searchArea, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(goButton)
                            .addComponent(originalTable))))
                .addGap(47, 47, 47)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(115, 115, 115)
                .addGroup(secondPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(remove, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(update2)
                    .addComponent(backButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(logout, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(firstPage, javax.swing.GroupLayout.DEFAULT_SIZE, 732, Short.MAX_VALUE)
                .addGap(33, 33, 33)
                .addComponent(secondPage, javax.swing.GroupLayout.DEFAULT_SIZE, 1361, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(firstPage, javax.swing.GroupLayout.DEFAULT_SIZE, 711, Short.MAX_VALUE)
                    .addComponent(secondPage, javax.swing.GroupLayout.DEFAULT_SIZE, 711, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        // TODO add your handling code here:
        secondPage.setVisible(true);
        originalTable.setVisible(false);
        firstPage.setVisible(false);
        addRowToTable();
    }//GEN-LAST:event_addButtonActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // TODO add your handling code here:
        secondPage.setVisible(false);
        firstPage.setVisible(true);
        addButton.setVisible(true);
        firstField.setText("");
        lastField.setText("");
        country.setText("");

    }//GEN-LAST:event_backButtonActionPerformed

    private void maleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maleActionPerformed
        // TODO add your handling code here:
        female.setSelected(false);
        sexSelect = "male";
    }//GEN-LAST:event_maleActionPerformed

    private void femaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_femaleActionPerformed
        // TODO add your handling code here:
        male.setSelected(false);
        sexSelect = "female";
    }//GEN-LAST:event_femaleActionPerformed

    private void deptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deptActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_deptActionPerformed

    private void marriedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_marriedActionPerformed
        // TODO add your handling code here:
        unmarried.setSelected(false);
        marr = "married";
    }//GEN-LAST:event_marriedActionPerformed

    private void unmarriedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unmarriedActionPerformed
        // TODO add your handling code here:
        married.setSelected(false);
        marr = "unmarried";
    }//GEN-LAST:event_unmarriedActionPerformed

    private void removeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        int row = table.getSelectedRow();
        model.removeRow(row);
    }//GEN-LAST:event_removeActionPerformed

    private void update2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_update2ActionPerformed
        // TODO add your handling code here:
        iUp = table.getSelectedRow();
        secondPage.setVisible(false);
        firstPage.setVisible(true);
        update.setVisible(true);
        addButton.setVisible(false);

    }//GEN-LAST:event_update2ActionPerformed

    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        model.setValueAt(firstField.getText() + " " + lastField.getText(), iUp, 0);
        model.setValueAt(country.getText(), iUp, 1);
        model.setValueAt(dept.getSelectedItem().toString(), iUp, 2);
        model.setValueAt(sexSelect, iUp, 3);
        model.setValueAt(marr, iUp, 4);
        model.setValueAt(cgpaArea.getText(), iUp, 5);
        secondPage.setVisible(true);
        list.get(iUp).name = firstField.getText() + " " + lastField.getText();
        list.get(iUp).country = country.getText();
        list.get(iUp).department = dept.getSelectedItem().toString();
        list.get(iUp).sex = sexSelect;
        list.get(iUp).marriedS = marr;
        list.get(iUp).cgpa = cgpaArea.getText();
        update.setVisible(false);
        firstPage.setVisible(false);
        JOptionPane.showMessageDialog(this, "Update succesful");
    }//GEN-LAST:event_updateActionPerformed

    private void logoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutActionPerformed
        // TODO add your handling code here:
        LoginForm login = new LoginForm();
        login.setVisible(true);
        this.hide();
    }//GEN-LAST:event_logoutActionPerformed
    public void sortAccordingtoDepartment() {
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        System.out.println(list.size());
        for (int i = 0; i < list.size(); i++) {
            model.getDataVector().removeAllElements();
        }

        Collections.sort(list, Users.UsersDepartmentComparator);

        Object rowData[] = new Object[6];
        for (int i = 0; i < list.size(); i++) {
            rowData[0] = list.get(i).name;
            rowData[1] = list.get(i).country;
            rowData[2] = list.get(i).sex;
            rowData[3] = list.get(i).department;
            rowData[4] = list.get(i).marriedS;
            rowData[5] = list.get(i).cgpa;
            model.addRow(rowData);
        }
    }

    public void sortAccordingtoName() {

        String sort = sortList.getSelectedItem().toString();
        if (sort.equalsIgnoreCase("name")) {
            DefaultTableModel model = (DefaultTableModel) table.getModel();
            System.out.println(list.size());
            for (int i = 0; i < list.size(); i++) {
                model.getDataVector().removeAllElements();
            }

            Collections.sort(list, Users.UsersNameComparator);

            Object rowData[] = new Object[6];
            for (int i = 0; i < list.size(); i++) {
                rowData[0] = list.get(i).name;
                rowData[1] = list.get(i).country;
                rowData[2] = list.get(i).sex;
                rowData[3] = list.get(i).department;
                rowData[4] = list.get(i).marriedS;
                rowData[5] = list.get(i).cgpa;
                model.addRow(rowData);
            }
        }
    }

    public void sortAccordingtoCGPA() {
        String sort = sortList.getSelectedItem().toString();
        if (sort.equalsIgnoreCase("cgpa")) {
            DefaultTableModel model = (DefaultTableModel) table.getModel();
            System.out.println(list.size());
            for (int i = 0; i < list.size(); i++) {
                model.getDataVector().removeAllElements();
            }

            Collections.sort(list, Users.UsersCGPAComparator);

            Object rowData[] = new Object[6];
            for (int i = 0; i < list.size(); i++) {
                rowData[0] = list.get(i).name;
                rowData[1] = list.get(i).country;
                rowData[2] = list.get(i).sex;
                rowData[3] = list.get(i).department;
                rowData[4] = list.get(i).marriedS;
                rowData[5] = list.get(i).cgpa;
                model.addRow(rowData);
            }
        }
    }
    private void sortListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortListActionPerformed
        // TODO add your handling code here:
        String action = sortList.getSelectedItem().toString();
        if (action.equalsIgnoreCase("name")) {
            sortAccordingtoName();
        } else if (action.equalsIgnoreCase("department")) {
            sortAccordingtoDepartment();
        } else if (action.equalsIgnoreCase("cgpa")) {
            sortAccordingtoCGPA();
        }

    }//GEN-LAST:event_sortListActionPerformed
    public void searchName(ArrayList<Users> list1, String searchComboStringName) {
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        int rows = model.getRowCount();
        ArrayList<Users> newList = new ArrayList<Users>();
        //ArrayList<Users> newList = Users.searchName(list, searchComboStringName);
        int flag = Users.searchName(list, newList, searchComboStringName);
        if (flag == 1) {
            for (int i = rows - 1; i > -1; i--) {
                model.removeRow(i);
            }
            System.out.println(newList.size());
            for (int i = 0; i < newList.size(); i++) {
                System.out.println("entered");
                Object rowData[] = new Object[6];
                //for (int j = 0; j < newList.size(); j++) {
                rowData[0] = newList.get(i).name;
                rowData[1] = newList.get(i).country;
                rowData[2] = newList.get(i).sex;
                rowData[3] = newList.get(i).department;
                rowData[4] = newList.get(i).marriedS;
                rowData[5] = newList.get(i).cgpa;

                model.addRow(rowData);
                //}
            }
        } else {
            JOptionPane.showMessageDialog(null, "The name " + searchComboStringName + " is not in the list");
            originalTable.setVisible(false);
            for (int i = rows - 1; i > -1; i--) {
                model.removeRow(i);
            }
            for (int i = 0; i < list.size(); i++) {
                Object rowData[] = new Object[6];
                for (int j = 0; j < list.size(); j++) {
                    rowData[0] = list.get(j).name;
                    rowData[1] = list.get(j).country;
                    rowData[2] = list.get(j).sex;
                    rowData[3] = list.get(j).department;
                    rowData[4] = list.get(j).marriedS;
                    rowData[5] = list.get(j).cgpa;
                    model.addRow(rowData);
                }
            }
        }
    }
    String searchComboString;
    private void searchComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchComboActionPerformed
        // TODO add your handling code here:
        searchComboString = searchCombo.getSelectedItem().toString();

    }//GEN-LAST:event_searchComboActionPerformed

    public void searchDept(ArrayList<Users> list1, String searchComboStringName) {
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        int rows = model.getRowCount();
        ArrayList<Users> newList = new ArrayList<Users>();
        int flag = Users.searchDept(list, newList, searchComboStringName);
        if (flag == 1) {
            for (int i = rows - 1; i > -1; i--) {
                model.removeRow(i);
            }
            System.out.println(newList.size());
            for (int i = 0; i < newList.size(); i++) {
                System.out.println("entered");
                Object rowData[] = new Object[6];
                //for (int j = 0; j < newList.size(); j++) {
                rowData[0] = newList.get(i).name;
                rowData[1] = newList.get(i).country;
                rowData[2] = newList.get(i).sex;
                rowData[3] = newList.get(i).department;
                rowData[4] = newList.get(i).marriedS;
                rowData[5] = newList.get(i).cgpa;
                //JOptionPane.showMessageDialog(null, rowData[0]);
                model.addRow(rowData);
                //}
            }
        } else {
            JOptionPane.showMessageDialog(null, "The name " + searchComboStringName + " is not in the list");
            originalTable.setVisible(false);
            for (int i = rows - 1; i > -1; i--) {
                model.removeRow(i);
            }
            for (int i = 0; i < list.size(); i++) {
                Object rowData[] = new Object[6];
                for (int j = 0; j < list.size(); j++) {
                    rowData[0] = list.get(j).name;
                    rowData[1] = list.get(j).country;
                    rowData[2] = list.get(j).sex;
                    rowData[3] = list.get(j).department;
                    rowData[4] = list.get(j).marriedS;
                    rowData[5] = list.get(j).cgpa;
                    model.addRow(rowData);
                }
            }
        }
    }

    public void searchCountry(ArrayList<Users> list1, String searchComboStringName) {
        System.out.println("entered searchcountry");
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        int rows = model.getRowCount();
        ArrayList<Users> newList = new ArrayList<Users>();
        int flag = Users.searchCountry(list, newList, searchComboStringName);
        if (flag == 1) {
            for (int i = rows - 1; i > -1; i--) {
                model.removeRow(i);
            }
            System.out.println(newList.size());
            for (int i = 0; i < newList.size(); i++) {
                System.out.println("entered");
                Object rowData[] = new Object[6];
                //for (int j = 0; j < newList.size(); j++) {
                rowData[0] = newList.get(i).name;
                rowData[1] = newList.get(i).country;
                rowData[2] = newList.get(i).sex;
                rowData[3] = newList.get(i).department;
                rowData[4] = newList.get(i).marriedS;
                rowData[5] = newList.get(i).cgpa;
                JOptionPane.showMessageDialog(null, rowData[0]);
                model.addRow(rowData);
                //}
            }
        } else {
            JOptionPane.showMessageDialog(null, "The name " + searchComboStringName + " is not in the list");
            originalTable.setVisible(false);
            for (int i = rows - 1; i > -1; i--) {
                model.removeRow(i);
            }
            for (int i = 0; i < list.size(); i++) {
                Object rowData[] = new Object[6];
                for (int j = 0; j < list.size(); j++) {
                    rowData[0] = list.get(j).name;
                    rowData[1] = list.get(j).country;
                    rowData[2] = list.get(j).sex;
                    rowData[3] = list.get(j).department;
                    rowData[4] = list.get(j).marriedS;
                    rowData[5] = list.get(j).cgpa;
                    model.addRow(rowData);
                }
            }
        }
    }

    public void searchCGPA(ArrayList<Users> list1, String searchComboStringName) {
        System.out.println("entered searchcountry");
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        int rows = model.getRowCount();
        //ArrayList<Users> newList = Users.searchCGPA(list, searchComboStringName);
        ArrayList<Users> newList = new ArrayList<Users>();
        int flag = Users.searchCGPA(list, newList, searchComboStringName);
        if (flag == 1) {
            for (int i = rows - 1; i > -1; i--) {
                model.removeRow(i);
            }
            System.out.println(newList.size());
            for (int i = 0; i < newList.size(); i++) {
                System.out.println("entered");
                Object rowData[] = new Object[6];
                //for (int j = 0; j < newList.size(); j++) {
                rowData[0] = newList.get(i).name;
                rowData[1] = newList.get(i).country;
                rowData[2] = newList.get(i).sex;
                rowData[3] = newList.get(i).department;
                rowData[4] = newList.get(i).marriedS;
                rowData[5] = newList.get(i).cgpa;
                //JOptionPane.showMessageDialog(null, rowData[0]);
                model.addRow(rowData);
                //}
            }
        } else {
            JOptionPane.showMessageDialog(null, "The name " + searchComboStringName + " is not in the list");
            originalTable.setVisible(false);
            for (int i = rows - 1; i > -1; i--) {
                model.removeRow(i);
            }
            for (int i = 0; i < list.size(); i++) {
                Object rowData[] = new Object[6];
                for (int j = 0; j < list.size(); j++) {
                    rowData[0] = list.get(j).name;
                    rowData[1] = list.get(j).country;
                    rowData[2] = list.get(j).sex;
                    rowData[3] = list.get(j).department;
                    rowData[4] = list.get(j).marriedS;
                    rowData[5] = list.get(j).cgpa;
                    model.addRow(rowData);
                }
            }
        }
    }
    private void goButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goButtonActionPerformed
        // TODO add your handling code here:
        originalTable.setVisible(true);
        if (searchComboString.equalsIgnoreCase("name")) {
            searchName(list, searchArea.getText());
        }
        if (searchComboString.equalsIgnoreCase("department")) {
            searchDept(list, searchArea.getText());
        }
        if (searchComboString.equalsIgnoreCase("country")) {
            searchCountry(list, searchArea.getText());
        }
        if (searchComboString.equalsIgnoreCase("cgpa")) {
            searchCGPA(list, searchArea.getText());
        }
    }//GEN-LAST:event_goButtonActionPerformed

    private void originalTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_originalTableActionPerformed
        // TODO add your handling code here:
        showOriginalTable();
    }//GEN-LAST:event_originalTableActionPerformed

    private void buttonGroup() {
        ButtonGroup b1 = new ButtonGroup();
        b1.add(male);
        b1.add(female);
        ButtonGroup b2 = new ButtonGroup();
        b2.add(married);
        b2.add(unmarried);
    }

    ArrayList<Users> list = new ArrayList<Users>();
    String cgpa;

    public ArrayList userList() {
        cgpa = cgpaArea.getText();
        String name = firstField.getText() + " " + lastField.getText();
        String country = this.country.getText();
        ArrayList<Users> listUnderUserlist = new ArrayList<Users>();
        Users user = new Users(name, country, dept.getSelectedItem().toString(), sexSelect, marr, cgpa);
        list.add(user);
        listUnderUserlist.add(user);
        return listUnderUserlist;
    }

    public void addRowToTable() {
        DefaultTableModel table = (DefaultTableModel) this.table.getModel();
        ArrayList<Users> list = userList();

        Object rowData[] = new Object[6];
        for (int i = 0; i < list.size(); i++) {
            rowData[0] = list.get(i).name;
            rowData[1] = list.get(i).country;
            rowData[2] = list.get(i).sex;
            rowData[3] = list.get(i).department;
            rowData[4] = list.get(i).marriedS;
            rowData[5] = list.get(i).cgpa;
            table.addRow(rowData);
        }
    }

    public void showOriginalTable() {
        originalTable.setVisible(false);
        DefaultTableModel model = (DefaultTableModel) this.table.getModel();
        int rows = model.getRowCount();
        for (int i = rows - 1; i > -1; i--) {
            model.removeRow(i);
        }
        Object rowData[] = new Object[6];
        for (int i = 0; i < list.size(); i++) {
            rowData[0] = list.get(i).name;
            rowData[1] = list.get(i).country;
            rowData[2] = list.get(i).sex;
            rowData[3] = list.get(i).department;
            rowData[4] = list.get(i).marriedS;
            rowData[5] = list.get(i).cgpa;
            model.addRow(rowData);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Page.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Page.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Page.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Page.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Page().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel CGPALabel;
    private javax.swing.JButton addButton;
    private javax.swing.JButton backButton;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JTextField cgpaArea;
    private javax.swing.JTextField country;
    private javax.swing.JComboBox<String> dept;
    private javax.swing.JRadioButton female;
    private javax.swing.JTextField firstField;
    private javax.swing.JPanel firstPage;
    private javax.swing.JButton goButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField lastField;
    private javax.swing.JButton logout;
    private javax.swing.JRadioButton male;
    private javax.swing.JRadioButton married;
    private javax.swing.JButton originalTable;
    private javax.swing.JButton remove;
    private javax.swing.JTextField searchArea;
    private javax.swing.JComboBox<String> searchCombo;
    private javax.swing.JLabel searchLabel;
    private javax.swing.JPanel secondPage;
    private javax.swing.JLabel sortLabel;
    private javax.swing.JComboBox<String> sortList;
    private javax.swing.JTable table;
    private javax.swing.JRadioButton unmarried;
    private javax.swing.JButton update;
    private javax.swing.JButton update2;
    // End of variables declaration//GEN-END:variables
}
